class TokenService {
  late List<Till> _tills;

  Token authenticatedUser = Token();
  Token pinUser = Token();

  void login(LoginResponse response, List<Till> tills, Employee? employee, DeviceType deviceType) {
    Token token = createToken(deviceType);
    assignTokenAttributes(token, response);

    if (deviceType == DeviceType.pos) {
      token.posDevice = (response.attributes as PosAttributesResponse).device;
      token.employee = (response.attributes as PosAttributesResponse).employee;
    } else if (deviceType == DeviceType.kds) {
      token.kdsDevice = (response.attributes as KdsAttributesResponse).device;
    } else {
      token.employee = (response.attributes as EmployeeAttributesResponse).employee;
    }

    if (authenticatedUser.employee == null) {
      authenticatedUser = token;
    } else {
      pinUser = token;
    }
  }

  Token createToken(DeviceType deviceType) {
    switch (deviceType) {
      case DeviceType.pos: return PosToken();
      case DeviceType.kds: return KdsToken();
      default: return OnFlyToken();
    }
  }

  void assignTokenAttributes(Token token, LoginResponse response) {
    token.token = response.access_token;
    token.roles = response.roles;
    token.cookie = response.cookie;
  }

  bool logout() {
    if (authenticatedUser.token != null) {
      authenticatedUser.clear();
      return true;
    }
    return false;
  }

  void logoutEveryone() {
    authenticatedUser.clear();
    pinUser.clear();
  }

  bool logoutElevatedUsers() => logout();

  void forceLogout() {
    while (isDeviceLoggedIn) {
      logout();
    }
  }

  bool get isDeviceLoggedIn => authenticatedUser.posDevice != null;
  bool get isKdsDeviceLoggedIn => authenticatedUser.kdsDevice != null;
  bool get isEmployeeLoggedIn => authenticatedUser.employee != null;

  String? get registerToken => authenticatedUser.token;
  String? get registerCookie => authenticatedUser.cookie;
  String? get token => pinUser.token ?? authenticatedUser.token;
  EmployeeResponse? get employee => pinUser.employee ?? authenticatedUser.employee;

  int get currentEmployeeId => employee?.id ?? 0;

  RegisterResponse? get register => authenticatedUser.posDevice;
  PrinterTypesResponse? get printerType => authenticatedUser.kdsDevice;

  bool get isRegisterActive {
    final reg = authenticatedUser.posDevice;
    if (reg == null) return false;

    final activeFrom = DateTime.parse(reg.activeFrom);
    final activeTo = DateTime.parse(reg.activeTo);

    return reg.isAlways || (activeFrom.isBefore(activeTo) && activeFrom.isBefore(DateTime.now()) && activeTo.isAfter(DateTime.now()));
  }

  int get count => (authenticatedUser.token != null && pinUser.token != null) ? 2 : 1;
}

class Token {
  String? token;
  List<String>? roles;
  DateTime? acquisitionTime;
  String? cookie;
  EmployeeResponse? employee;
  RegisterResponse? posDevice;
  PrinterTypesResponse? kdsDevice;

  void clear() {
    token = null;
    roles?.clear();
    employee = null;
    posDevice = null;
    kdsDevice = null;
    cookie = null;
  }
}

class OnFlyToken extends Token {}
class PosToken extends Token {}
class KdsToken extends Token {}

// DeviceType enum
enum DeviceType { pos, kds, other }
