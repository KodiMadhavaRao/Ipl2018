import 'package:flutter/services.dart';
import 'package:intl/intl.dart';

class CurrencyHelper {
  static final NumberFormat _formatter = NumberFormat("#,##0.00", "en_US");

  /// Convert number to formatted currency string (for UI display)
  static String formatForUI(double value) {
    return _formatter.format(value);
  }

  /// Convert formatted string back to double (for storage/calculations)
  static double parseToRawValue(String formattedValue) {
    return double.tryParse(formattedValue.replaceAll(',', '')) ?? 0.0;
  }
}

/// Custom TextInputFormatter to format currency input
class UsCurrencyInputFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.isEmpty) return newValue;

    // Remove all non-numeric characters except decimal point
    String cleanedText = newValue.text.replaceAll(RegExp(r'[^0-9.]'), '');

    // Convert to a number
    double? value = double.tryParse(cleanedText);
    if (value == null) return oldValue;

    // Format for display
    String formattedText = CurrencyHelper.formatForUI(value);

    return TextEditingValue(
      text: formattedText,
      selection: TextSelection.collapsed(offset: formattedText.length),
    );
  }
}

TextFormField(
  keyboardType: TextInputType.numberWithOptions(decimal: true),
  inputFormatters: [UsCurrencyInputFormatter()],
  decoration: InputDecoration(
    labelText: "Enter Amount",
    prefixText: "\$", // Optional
  ),
  onChanged: (value) {
    double rawValue = CurrencyHelper.parseToRawValue(value);
    print("Raw Value: $rawValue"); // This will be 1333.33, while UI shows 1,333.33
  },
)
